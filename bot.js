const TelegramBot = require('node-telegram-bot-api');
const mysql = require('mysql2/promise');

const axios = require('axios');
const SCREENSHOT_API_KEY = 'c3727ba40735665a32e236e46d92d6b6';

const token = '7484499923:AAGFDFeq2uk8L7jrYQ-f4gqnWI7tFfPUCQI';

const bot = new TelegramBot(token, { polling: true });


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –ë–î
async function getRandomItemMessage(dbConfig) {
    try {
        const connection = await mysql.createConnection(dbConfig);
        const [rows] = await connection.query('SELECT * FROM Items ORDER BY RAND() LIMIT 1');
        connection.end();

        if (rows.length > 0) {
            const item = rows[0];
            return `ID: ${item.id};  Name: ${item.name};  Desc: ${item.desc}`;
        } else {
            return '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.';
        }
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ randomItem: ${err.message}`);
        return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞.';
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'chatbottests',
};

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    const helpMessage = `
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
1. /help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
2. /site - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –û–∫—Ç–∞–≥–æ–Ω–∞.
3. /creator - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –§–ò–û —Å–æ–∑–¥–∞—Ç–µ–ª—è.
4. /randomItem - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Items.
5. /deleteItem <id> - —É–¥–∞–ª—è–µ—Ç –µ–ª–µ–º–µ–Ω—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Items –ø–æ ID.
6. /getItemByID <id> - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Items –ø–æ ID. 
7. /getAllItems - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Items.
8. /addItem <name> <desc> - –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ —Ç–∞–±–ª–∏—Ü—É Items.
9. /updateItem <id> <name> <desc> - –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–ª–µ–º–µ–Ω—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Items –ø–æ ID.
10. !qr <—Ç–µ–∫—Å—Ç> - —Å–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
11. !webscr <URL> - –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–µ–±-—Å–∞–π—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —á–∞—Ç.
`;
    bot.sendMessage(chatId, helpMessage);
});

// –ö–æ–º–∞–Ω–¥–∞ /site
bot.onText(/\/site/, (msg) => {
    const chatId = msg.chat.id;
    const siteLink = 'https://students.forus.ru';
    bot.sendMessage(chatId, `–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç –û–∫—Ç–∞–≥–æ–Ω–∞: ${siteLink}`);
});

// –ö–æ–º–∞–Ω–¥–∞ /creator
bot.onText(/\/creator/, (msg) => {
    const chatId = msg.chat.id;
    const creatorName = '–ö–æ–∂–µ–≤–Ω–∏–∫–æ–≤ –ê—Ä—Ç—ë–º –ï–≤–≥–µ–Ω—å–µ–≤–∏—á';
    bot.sendMessage(chatId, `–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞: ${creatorName}`);
});

// –ö–æ–º–∞–Ω–¥–∞ /randomItem
bot.onText(/\/randomItem/, async (msg) => {
    const chatId = msg.chat.id;

    // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–ª—É—á–∞–π–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
    const message = await getRandomItemMessage(dbConfig);

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.sendMessage(chatId, message);
});

// –ö–æ–º–∞–Ω–¥–∞ /deleteItem
bot.onText(/\/deleteItem (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const itemId = parseInt(match[1], 10);

    try {
        const connection = await mysql.createConnection(dbConfig);
        const [result] = await connection.query('DELETE FROM Items WHERE id = ?', [itemId]);
        connection.end();

        if (result.affectedRows > 0) {
            bot.sendMessage(chatId, '–≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.');
        } else {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –≠–ª–µ–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
    } catch (err) {
        bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: ${err.message}`);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /getItemByID
bot.onText(/\/getItemByID (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const itemId = parseInt(match[1], 10);

    try {
        const connection = await mysql.createConnection(dbConfig);
        const [rows] = await connection.query('SELECT * FROM Items WHERE id = ?', [itemId]);
        connection.end();

        if (rows.length > 0) {
            const item = rows[0];
            bot.sendMessage(chatId, `ID: ${item.id};  Name: ${item.name};  Desc: ${item.desc}`);
        } else {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –≠–ª–µ–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
    } catch (err) {
        bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: ${err.message}`);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /getAllItems
bot.onText(/\/getAllItems/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        const connection = await mysql.createConnection(dbConfig);
        const [rows] = await connection.query('SELECT * FROM Items');
        connection.end();

        if (rows.length > 0) {
            const response = rows.map(item => `ID: ${item.id};  Name: ${item.name};  Desc: ${item.desc}`).join('\n');
            bot.sendMessage(chatId, response);
        } else {
            bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.');
        }
    } catch (err) {
        bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: ${err.message}`);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /addItem
bot.onText(/\/addItem (.+) (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const name = match[1];
    const desc = match[2];

    try {
        const connection = await mysql.createConnection(dbConfig);
        const [result] = await connection.query('INSERT INTO Items (name, `desc`) VALUES (?, ?)', [name, desc]);
        connection.end();

        bot.sendMessage(chatId, `–≠–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: ID: ${result.insertId};  Name: ${name};  Desc: ${desc}`);
    } catch (err) {
        bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: ${err.message}`);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /updateItem
bot.onText(/\/updateItem (\d+) (.+) (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const id = parseInt(match[1], 10);
    const name = match[2];
    const desc = match[3];

    try {
        const connection = await mysql.createConnection(dbConfig);
        const [result] = await connection.query('UPDATE Items SET name = ?, `desc` = ? WHERE id = ?', [name, desc, id]);
        connection.end();

        if (result.affectedRows > 0) {
            bot.sendMessage(chatId, `–≠–ª–µ–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: ID: ${id};  Name: ${name};  Desc: ${desc}`);
        } else {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –≠–ª–µ–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
    } catch (err) {
        bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: ${err.message}`);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ "!qr" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞
bot.onText(/^\!qr/, function(msg) {
	console.log(msg);
	var userId = msg.from.id;
	var data = msg.text.substring(3).trim();
	var imageqr = "https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=" + data;
	bot.sendMessage(msg.chat.id, "[‚úèÔ∏è](" + imageqr + ")Qr code de: " + data,{parse_mode : "Markdown"});
});

// –ö–æ–º–∞–Ω–¥–∞ "!webscr" –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å–∞–π—Ç–∞
// –ü–æ–ø—Ä–æ–±–æ–≤–∞–ª –≤—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥ –∏–∑ –≤—Å–ø–æ–º–æ–≥–∞–ª–µ—Ç–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏, –Ω–æ —ç—Ç–æ—Ç api —É–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –î–æ–º–µ–Ω –ø—Ä–æ–¥–∞—ë—Ç—Å—è)
// –ü–æ—ç—Ç–æ–º—É –Ω–∞—à—ë–ª –¥—Ä—É–≥–æ–π api –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –Ω–∏–∂–µ
//bot.onText(/^\!webscr/, function(msg) {
//	console.log(msg);
//	var userId = msg.from.id;
//	var url = msg.text.substring(8).trim();
//	var image = "https://api.letsvalidate.com/v1/thumbs/?url=" + url + "&width=1280&height=720";
//	bot.sendMessage(msg.chat.id, "[üì∑](" + image + ") Captura de la web: " + url,{parse_mode : "Markdown"});
//});

// –ö–æ–º–∞–Ω–¥–∞ "!webscr" –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å–∞–π—Ç–∞
bot.onText(/^\!webscr (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const url = match[1].trim(); // Extract URL from the command

    // Validate URL
    if (!/^https?:\/\//i.test(url)) {
        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º http –∏–ª–∏ https.');
        return;
    }

    try {
        const apiUrl = `http://api.screenshotlayer.com/api/capture?access_key=${SCREENSHOT_API_KEY}&url=${encodeURIComponent(url)}&viewport=1280x1024&fullpage=1&format=PNG`;

        const response = await axios.get(apiUrl, { responseType: 'arraybuffer' });

        if (response.status === 200) {
        
            const buffer = Buffer.from(response.data, 'binary');
            await bot.sendPhoto(chatId, buffer, { caption: `–°–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞: ${url}` });
        } else {
            bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: ${response.status}`);
        }
    } catch (err) {
        console.error('Error capturing screenshot:', err.message);
        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É "Users" —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on('message', async (msg) => {
    const userId = msg.from.id;
    const today = new Date().toISOString().split('T')[0];

    try {
        const connection = await mysql.createConnection(dbConfig);

        await connection.query(
            `INSERT INTO Users (ID, lastMessage) VALUES (?, ?)
             ON DUPLICATE KEY UPDATE lastMessage = VALUES(lastMessage)`,
            [userId, today]
        );

        connection.end();
        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: ${err.message}`);
    }

    console.log(`Received message: ${msg.text} from ${msg.chat.username || 'unknown user'}`);
});

const { setIntervalAsync } = require('set-interval-async/dynamic');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (13:00 –ú–°–ö)
setIntervalAsync(async () => {
    const now = new Date();
    const moscowOffset = 3 * 60 * 60 * 1000; // –°–º–µ—â–µ–Ω–∏–µ –Ω–∞ 3 —á–∞—Å–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ UTC
    const moscowTime = new Date(now.getTime() + moscowOffset);

    if (moscowTime.getHours() === 13 && moscowTime.getMinutes() === 0) {
        try {
            const connection = await mysql.createConnection(dbConfig);

            const twoDaysAgo = new Date();
            twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);
            const twoDaysAgoString = twoDaysAgo.toISOString().split('T')[0];

            const [rows] = await connection.query(
                'SELECT ID FROM Users WHERE lastMessage < ?',
                [twoDaysAgoString]
            );

            connection.end();

            for (const user of rows) {
                const chatId = user.ID;

                const message = await getRandomItemMessage(dbConfig);

                await bot.sendMessage(chatId, `–í—ã –Ω–µ –ø–∏—Å–∞–ª–∏ –±–æ–ª–µ–µ 2 –¥–Ω–µ–π. –í–æ—Ç –≤–∞—à —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç:\n${message}`);
            }
        } catch (err) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${err.message}`);
        }
    }
}, 60000);

// –õ–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å
bot.on('message', (msg) => {
    console.log(`Received message: ${msg.text} from ${msg.chat.username || 'unknown user'}`);
});